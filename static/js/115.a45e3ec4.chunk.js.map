{"version":3,"file":"static/js/115.a45e3ec4.chunk.js","mappings":"6QAEaA,EAAWC,EAAAA,GAAAA,IAAH,sBACRC,EAAcD,EAAAA,GAAAA,IAAH,sBACXE,EAAWF,EAAAA,GAAAA,EAAH,sBACRG,EAAYH,EAAAA,GAAAA,GAAH,sBACTI,EAAcJ,EAAAA,GAAAA,IAAH,sRAcXK,EAAWL,EAAAA,GAAAA,GAAH,6HAQRM,EAAWN,EAAAA,GAAAA,GAAH,iT,kBCuBrB,MAtCA,WACE,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAK,IACYC,EADb,mCACF,qGACuBC,EAAAA,EAAAA,IAAcJ,GADrC,OACQK,EADR,OAEEN,EAASM,GAFX,2CADE,qDAKFF,GAGD,CAFC,MAAOG,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACN,KAGF,SAACX,EAAD,WACE,SAACM,EAAD,UACGG,EAAMW,KAAI,SAAAC,GACT,OACE,UAACd,EAAD,YACE,SAACF,EAAD,CACEiB,IAAG,yCAAoCD,EAAKE,cAC5CC,IAAG,UAAKH,EAAKI,KAAV,aACHC,MAAM,SAER,UAACxB,EAAD,YACE,UAACE,EAAD,WAAW,SAAOiB,EAAKI,SACvB,UAACtB,EAAD,WAAU,cAAYkB,EAAKM,kBARhBN,EAAKO,GAYvB,OAIR,C,+LChDDC,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,mCACRC,eAAe,EACfC,SAAU,SAGL,IAAMC,EAAgB,mCAAG,6GAAOC,EAAP,+BAAe,GAAf,SAEtBC,EAAWD,EAAK,+BACMA,GADN,kBAFM,SAKLL,EAAAA,EAAAA,IAAUM,GALL,uBAKpBC,EALoB,EAKpBA,KALoB,kBAMrBA,EAAKC,SANgB,wCAQtB,IAAIC,MAAM,2BARY,0DAAH,qDAYtB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBV,EAAAA,EAAAA,IAAU,uBAF9B,uBAEKO,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,sCAKG,IAAIC,MAAM,4BALb,gFASA,IAAME,EAAgB,mCAAG,WAAM7B,GAAN,kGAELkB,EAAAA,EAAAA,IAAA,gBAAmBlB,IAFd,uBAEpByB,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,sCAKtB,IAAIE,MAAM,gCALY,yDAAH,sDAQhBvB,EAAa,mCAAG,WAAMJ,GAAN,kGAEFkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,YAAsC,CAC3D8B,OAAQ,CACNb,GAAIjB,EACJqB,SAAU,WALW,uBAEjBI,EAFiB,EAEjBA,KAFiB,kBAQlBA,EAAKf,MARa,sCAUnB,IAAIiB,MAAM,gCAVS,yDAAH,sDAcbI,EAAgB,mCAAG,WAAM/B,GAAN,kGAELkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,YAAsC,CAC3D8B,OAAQ,CACNb,GAAIjB,EACJqB,SAAU,WALc,uBAEpBI,EAFoB,EAEpBA,KAFoB,kBAQrBA,EAAKC,SARgB,sCAUtB,IAAIC,MAAM,mCAVY,yDAAH,qD","sources":["components/cast/Cast.styled.js","components/cast/Cast.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastWrap = styled.div``;\nexport const CastSubWrap = styled.div``;\nexport const CastText = styled.p``;\nexport const CastTitle = styled.h3``;\nexport const PosterMovie = styled.img`\n  width: 50%;\n  height: 70%;\n  border-radius: 8px;\n  object-fit: fill;\n  object-position: center;\n  transform: scale(1);\n  transition: transform 250ms linear;\n  &:hover {\n    transform: scale(1.18);\n    transition: transform 250ms linear;\n  }\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  list-style: none;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  width: 20vw;\n  text-align: center;\n  padding-top: 20px;\n  border: 1px solid gray;\n  border-radius: 20px;\n  background-color: wheat;\n  transition: background-color 250ms linear;\n  &:hover {\n    background-color: gray;\n    transition: background-color 250ms linear;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastList,\n  CastItem,\n  PosterMovie,\n  CastWrap,\n  CastSubWrap,\n  CastText,\n  CastTitle,\n} from './Cast.styled';\nimport { getMoviesCast } from 'services/movieAPI';\n\nfunction Cast() {\n  const [casts, setCasts] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      async function fetchMovieCasts() {\n        const result = await getMoviesCast(movieId);\n        setCasts(result);\n      }\n      fetchMovieCasts();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <CastWrap>\n      <CastList>\n        {casts.map(cast => {\n          return (\n            <CastItem key={cast.id}>\n              <PosterMovie\n                src={`https://image.tmdb.org/t/p/w300${cast.profile_path}`}\n                alt={`${cast.name} portrait`}\n                width=\"100\"\n              />\n              <CastSubWrap>\n                <CastTitle>Name: {cast.name}</CastTitle>\n                <CastText>Character: {cast.character}</CastText>\n              </CastSubWrap>\n            </CastItem>\n          );\n        })}\n      </CastList>\n    </CastWrap>\n  );\n}\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `7936da9f8864de7ea98146d0f43f51e5`,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getMoviesByQuery = async (query = '') => {\n  try {\n    const urlParam = query\n      ? `/search/movie?&query=${query}`\n      : `/movie/upcoming`;\n    const { data } = await axios.get(urlParam);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\n\nexport async function getMovies() {\n  try {\n    const { data } = await axios.get('/trending/movie/day');\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n}\n\nexport const getMoviesDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\nexport const getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n        language: 'en-US',\n      },\n    });\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\nexport const getMoviesReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n"],"names":["CastWrap","styled","CastSubWrap","CastText","CastTitle","PosterMovie","CastList","CastItem","useState","casts","setCasts","movieId","useParams","useEffect","fetchMovieCasts","getMoviesCast","result","error","console","log","map","cast","src","profile_path","alt","name","width","character","id","axios","api_key","include_adult","language","getMoviesByQuery","query","urlParam","data","results","Error","getMovies","getMoviesDetails","params","getMoviesReviews"],"sourceRoot":""}