{"version":3,"file":"static/js/621.ebf2744d.chunk.js","mappings":"kRAEaA,EAAaC,EAAAA,GAAAA,IAAH,2CAGVC,EAAaD,EAAAA,GAAAA,GAAH,kFAKVE,EAAaF,EAAAA,GAAAA,GAAH,mSAYVG,EAAcH,EAAAA,GAAAA,GAAH,sBACXI,EAAaJ,EAAAA,GAAAA,EAAH,sB,SCiBvB,MA7BA,WACE,OAA8BK,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAASC,EAAAA,EAAAA,MAUf,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGACuBC,EAAAA,EAAAA,IAAiBH,EAAOI,SAD/C,OACQC,EADR,OAEEN,EAAWM,GAFb,4CADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACN,KAGF,SAACT,EAAD,WACE,SAACE,EAAD,UACGK,GAA8B,IAAnBA,EAAQS,OAClBT,EAAQU,KAAI,SAAAC,GAAM,OAChB,UAACf,EAAD,YACE,UAACC,EAAD,WAAa,WAASc,EAAOC,WAC7B,SAACd,EAAD,UAAaa,EAAOE,YAFLF,EAAOG,GADR,KAOlB,SAACjB,EAAD,UAAa,mCAKtB,C,+LCrCDkB,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,mCACRC,eAAe,EACfC,SAAU,SAGL,IAAMC,EAAgB,mCAAG,6GAAOC,EAAP,+BAAe,GAAf,SAEtBC,EAAWD,EAAK,+BACMA,GADN,kBAFM,SAKLL,EAAAA,EAAAA,IAAUM,GALL,uBAKpBC,EALoB,EAKpBA,KALoB,kBAMrBA,EAAKC,SANgB,wCAQtB,IAAIC,MAAM,2BARY,0DAAH,qDAYtB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBV,EAAAA,EAAAA,IAAU,uBAF9B,uBAEKO,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,sCAKG,IAAIC,MAAM,4BALb,gFASA,IAAME,EAAgB,mCAAG,WAAMpB,GAAN,kGAELS,EAAAA,EAAAA,IAAA,gBAAmBT,IAFd,uBAEpBgB,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,sCAKtB,IAAIE,MAAM,gCALY,yDAAH,sDAQhBG,EAAa,mCAAG,WAAMrB,GAAN,kGAEFS,EAAAA,EAAAA,IAAA,gBAAmBT,EAAnB,YAAsC,CAC3DJ,OAAQ,CACNY,GAAIR,EACJY,SAAU,WALW,uBAEjBI,EAFiB,EAEjBA,KAFiB,kBAQlBA,EAAKM,MARa,sCAUnB,IAAIJ,MAAM,gCAVS,yDAAH,sDAcbnB,EAAgB,mCAAG,WAAMC,GAAN,kGAELS,EAAAA,EAAAA,IAAA,gBAAmBT,EAAnB,YAAsC,CAC3DJ,OAAQ,CACNY,GAAIR,EACJY,SAAU,WALc,uBAEpBI,EAFoB,EAEpBA,KAFoB,kBAQrBA,EAAKC,SARgB,sCAUtB,IAAIC,MAAM,mCAVY,yDAAH,qD","sources":["components/reviews/Reviews.styled.js","components/reviews/Reviews.jsx","services/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewWrap = styled.div`\n  display: block;\n`;\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\nexport const ReviewItem = styled.li`\n  border: 1px solid gray;\n  border-radius: 20px;\n  padding-left: 20px;\n  padding-right: 20px;\n  background-color: wheat;\n  transition: background-color 250ms linear;\n  &:hover {\n    background-color: gray;\n    transition: background-color 250ms linear;\n  }\n`;\nexport const ReviewTitle = styled.h3``;\nexport const ReviewText = styled.p``;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesReviews } from 'services/movieAPI';\nimport {\n  ReviewItem,\n  ReviewList,\n  ReviewText,\n  ReviewTitle,\n  ReviewWrap,\n} from './Reviews.styled';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState();\n  const params = useParams();\n\n  useEffect(() => {\n    async function fetchMoviesReviews() {\n      const result = await getMoviesReviews(params.movieId);\n      setReviews(result);\n    }\n    fetchMoviesReviews();\n  }, [params]);\n\n  return (\n    <ReviewWrap>\n      <ReviewList>\n        {reviews && reviews.length !== 0 ? (\n          reviews.map(review => (\n            <ReviewItem key={review.id}>\n              <ReviewTitle>Author: {review.author}</ReviewTitle>\n              <ReviewText>{review.content}</ReviewText>\n            </ReviewItem>\n          ))\n        ) : (\n          <ReviewTitle>Author: There is no reviews</ReviewTitle>\n        )}\n      </ReviewList>\n    </ReviewWrap>\n  );\n}\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `7936da9f8864de7ea98146d0f43f51e5`,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const getMoviesByQuery = async (query = '') => {\n  try {\n    const urlParam = query\n      ? `/search/movie?&query=${query}`\n      : `/movie/upcoming`;\n    const { data } = await axios.get(urlParam);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\n\nexport async function getMovies() {\n  try {\n    const { data } = await axios.get('/trending/movie/day');\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n}\n\nexport const getMoviesDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\nexport const getMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        id: movieId,\n        language: 'en-US',\n      },\n    });\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\nexport const getMoviesReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        id: movieId,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n"],"names":["ReviewWrap","styled","ReviewList","ReviewItem","ReviewTitle","ReviewText","useState","reviews","setReviews","params","useParams","useEffect","getMoviesReviews","movieId","result","fetchMoviesReviews","length","map","review","author","content","id","axios","api_key","include_adult","language","getMoviesByQuery","query","urlParam","data","results","Error","getMovies","getMoviesDetails","getMoviesCast","cast"],"sourceRoot":""}